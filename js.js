// Generated by CoffeeScript 1.2.1-pre
(function() {

  window.onload = function() {
    var boxLayer, boxes, lineLayer, linkMaking, makeBox, makeLink, mouse, selection, stage, started, wh, ww;
    ww = window.innerWidth;
    wh = window.innerHeight;
    mouse = {
      x: 0,
      y: 0
    };
    boxes = [];
    linkMaking = false;
    started = false;
    selection = [];
    window.selection = selection;
    stage = new Kinetic.Stage({
      container: "container",
      width: ww,
      height: wh
    });
    boxLayer = new Kinetic.Layer();
    lineLayer = new Kinetic.Layer();
    makeBox = function(x, y, text) {
      var box, h, rect, trans, w;
      trans = null;
      text = new Kinetic.Text({
        x: 1,
        y: 1,
        text: text,
        stroke: '#555',
        strokeWidth: 1,
        fill: '#ddd',
        fontSize: 14,
        fontFamily: 'Calibri',
        fontStyle: 'normal',
        textFill: '#555',
        padding: 10,
        align: 'center'
      });
      w = text.textWidth + 22;
      h = 150;
      rect = new Kinetic.Rect({
        x: 0,
        y: 0,
        width: w,
        height: h,
        fill: "#eee",
        stroke: "#333",
        alpha: 1,
        strokeWidth: 2,
        shadow: {
          color: "black",
          blur: 10,
          offset: [5, 5],
          alpha: 0.6
        }
      });
      box = new Kinetic.Group({
        draggable: true,
        x: x + w / 2,
        y: y + h / 2,
        scale: {
          x: 1,
          y: 1
        },
        offset: [w / 2, h / 2],
        links: [],
        selected: false,
        select: function(add) {
          var selectedbox, _i, _len;
          if (linkMaking) {
            for (_i = 0, _len = selection.length; _i < _len; _i++) {
              selectedbox = selection[_i];
              makeLink(selectedbox, box);
            }
            linkMaking = false;
          }
          if (!add) {
            boxes.map(function(b) {
              return b.attrs.unselect();
            });
          }
          selection.push(box);
          rect.setAttrs({
            shadow: {
              color: 'blue',
              blur: 10,
              offset: [5, 5],
              alpha: 0.6
            }
          });
          box.attrs.selected = true;
          box.moveToTop();
          return boxLayer.draw();
        },
        unselect: function() {
          selection.splice(box);
          rect.setAttrs({
            shadow: {
              color: 'black',
              blur: 10,
              offset: [5, 5],
              alpha: 0.6
            }
          });
          box.attrs.selected = false;
          return boxLayer.draw();
        },
        rect: rect,
        text: text
      });
      box.add(rect);
      box.add(text);
      text.on("click", function() {
        var txt;
        txt = prompt("Enter the name", text.attrs.text);
        if (txt) {
          text.setAttrs({
            text: txt
          });
          return rect.setAttrs({
            width: text.textWidth + 20
          });
        }
      });
      box.on("click", function(e) {
        if (box.attrs.selected) {
          return box.attrs.unselect();
        } else {
          return box.attrs.select(e.shiftKey);
        }
      });
      box.on("dragstart", function() {
        if (trans) trans.stop();
        box.moveToTop();
        rect.setAttrs({
          shadow: {
            offset: {
              x: 15,
              y: 15
            }
          }
        });
        return box.setAttrs({
          scale: {
            x: 1.4,
            y: 1.4
          }
        });
      });
      box.on("dragmove", function(e) {
        var link, points, _i, _len, _ref;
        _ref = box.attrs.links;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          link = _ref[_i];
          points = link.line.getPoints();
          points[link.side].x = box.attrs.x;
          points[link.side].y = box.attrs.y;
          link.line.setPoints(points);
        }
        return lineLayer.draw();
      });
      box.on("dragend", function() {
        rect.setAttrs({
          shadow: {
            offset: {
              x: 5,
              y: 5
            }
          }
        });
        return trans = box.transitionTo({
          duration: 0.5,
          easing: "elastic-ease-out",
          scale: {
            x: 1,
            y: 1
          }
        });
      });
      boxLayer.add(box);
      boxes.push(box);
      if (started) boxLayer.draw();
      return box;
    };
    makeLink = function(box1, box2) {
      var line;
      line = new Kinetic.Line({
        points: [box1.attrs.x, box1.attrs.y, box2.attrs.x, box2.attrs.y],
        stroke: "black",
        strokeWidth: 1.5,
        lineCap: "round",
        lineJoin: "round"
      });
      box1.attrs.links.push({
        line: line,
        side: 0
      });
      box2.attrs.links.push({
        line: line,
        side: 1
      });
      lineLayer.add(line);
      if (started) lineLayer.draw();
      return line;
    };
    stage.add(lineLayer);
    stage.add(boxLayer);
    window.ll = lineLayer;
    window.bl = boxLayer;
    window.document.body.onmousemove = function(e) {
      mouse.x = e.x;
      return mouse.y = e.y;
    };
    window.onkeydown = function(e) {
      if (e.keyCode === 78) {
        return makeBox(mouse.x, mouse.y, 'Box #' + boxes.length);
      } else if (e.keyCode === 76) {
        if (!linkMaking) return linkMaking = true;
      } else {
        boxLayer.draw();
        return lineLayer.draw();
      }
    };
    makeBox(100, 100, 'Box #' + boxes.length);
    makeBox(400, 200, 'Box #' + boxes.length);
    makeLink(boxes[0], boxes[1]);
    started = true;
    boxLayer.draw();
    return lineLayer.draw();
  };

}).call(this);
